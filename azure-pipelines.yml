# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-2019

variables:
  buildConfig: 'Release'

# task: DotNetCoreCLI@2
#   displayName: 'Build the project'
#   inputs:
#     command: 'build'
#     arguments: '--no-restore --configuration Release'
#     projects: '**/*.csproj'

# task: testdeploy@1
#   inputs:
#     azureSubscription: 'Pay-As-You-Go'
#     appType: 'webApp'
#     appName: 'myWebAppName'
#     deployToSlotOrASE: true
#     resourceGroupName: 'myResourceGroup'
#     slotName: 'staging'
#     deploymentMethod: 'auto'
steps:
- script: echo Hello, world! $(buildConfig) and path $(Build.SourcesDirectory) 
    echo "Structure of work folder of this pipeline:"
    tree $(Agent.WorkFolder)\1 /f
    echo "Build.ArtifactStagingDirectory:" 
    echo "$(Build.ArtifactStagingDirectory)"
    echo "Build.BinariesDirectory:" 
    echo "$(Build.BinariesDirectory)"
    echo "Build.SourcesDirectory:"
    echo "$(Build.SourcesDirectory)"
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  
#dotnet build "PipelineAspnetAPI\PipelineAspnetAPI.csproj" --configuration $(buildConfig)
  displayName: 'Run a multi-line script and build'

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

# - task: AzureWebApp@1
#   inputs:
#    azureSubscription: '16b1ea78-e3de-4cff-b96a-cc72c07c4519'
#    appType: webApp
#    appName: 'testpipeline2024'
#    package: '$(System.DefaultWorkingDirectory)/**/*.zip'

- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Pay-As-You-Go(16b1ea78-e3de-4cff-b96a-cc72c07c4519)'
    appType: 'webApp'
    WebAppName: 'testpipeline2024'
    packageForLinux: '$(System.ArtifactStagingDirectory)/**/*.zip'
    